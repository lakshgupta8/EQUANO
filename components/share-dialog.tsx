"use client"

import type React from "react"

import { useState } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Copy, Link, QrCode, Users, Code, Check } from "lucide-react"
import { useGraphStore } from "@/lib/stores/graph-store"

interface ShareDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  children: React.ReactNode
}

export function ShareDialog({ open, onOpenChange, children }: ShareDialogProps) {
  const [copied, setCopied] = useState<string | null>(null)
  const [shareSettings, setShareSettings] = useState({
    allowEdit: false,
    allowComments: true,
    requireAuth: false,
    expiration: "never",
  })

  const { graphSettings, expressions } = useGraphStore()

  // Generate share URLs (in real app, these would be generated by backend)
  const shareUrl = `https://equano.app/share/${Math.random().toString(36).substr(2, 9)}`
  const embedCode = `<iframe src="${shareUrl}/embed" width="800" height="600" frameborder="0"></iframe>`

  const copyToClipboard = async (text: string, type: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopied(type)
      setTimeout(() => setCopied(null), 2000)
    } catch (err) {
      console.error("Failed to copy:", err)
    }
  }

  const generateQRCode = () => {
    // In a real app, this would generate an actual QR code
    console.log("Generate QR code for:", shareUrl)
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>Share Graph</DialogTitle>
        </DialogHeader>

        <Tabs defaultValue="link" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="link">
              <Link className="h-4 w-4 mr-2" />
              Link
            </TabsTrigger>
            <TabsTrigger value="embed">
              <Code className="h-4 w-4 mr-2" />
              Embed
            </TabsTrigger>
            <TabsTrigger value="qr">
              <QrCode className="h-4 w-4 mr-2" />
              QR Code
            </TabsTrigger>
            <TabsTrigger value="collaborate">
              <Users className="h-4 w-4 mr-2" />
              Collaborate
            </TabsTrigger>
          </TabsList>

          <TabsContent value="link" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Share Link</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label>Public Link</Label>
                  <div className="flex gap-2">
                    <Input value={shareUrl} readOnly className="flex-1" />
                    <Button size="sm" onClick={() => copyToClipboard(shareUrl, "link")} className="flex-shrink-0">
                      {copied === "link" ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>

                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="allow-edit">Allow editing</Label>
                    <Switch
                      id="allow-edit"
                      checked={shareSettings.allowEdit}
                      onCheckedChange={(checked) => setShareSettings((prev) => ({ ...prev, allowEdit: checked }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <Label htmlFor="allow-comments">Allow comments</Label>
                    <Switch
                      id="allow-comments"
                      checked={shareSettings.allowComments}
                      onCheckedChange={(checked) => setShareSettings((prev) => ({ ...prev, allowComments: checked }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <Label htmlFor="require-auth">Require authentication</Label>
                    <Switch
                      id="require-auth"
                      checked={shareSettings.requireAuth}
                      onCheckedChange={(checked) => setShareSettings((prev) => ({ ...prev, requireAuth: checked }))}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>Link expiration</Label>
                    <Select
                      value={shareSettings.expiration}
                      onValueChange={(value) => setShareSettings((prev) => ({ ...prev, expiration: value }))}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="never">Never</SelectItem>
                        <SelectItem value="1hour">1 hour</SelectItem>
                        <SelectItem value="1day">1 day</SelectItem>
                        <SelectItem value="1week">1 week</SelectItem>
                        <SelectItem value="1month">1 month</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="embed" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Embed Code</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label>HTML Embed Code</Label>
                  <div className="flex gap-2">
                    <Input value={embedCode} readOnly className="flex-1 font-mono text-sm" />
                    <Button size="sm" onClick={() => copyToClipboard(embedCode, "embed")} className="flex-shrink-0">
                      {copied === "embed" ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>Width</Label>
                    <Input defaultValue="800" />
                  </div>
                  <div className="space-y-2">
                    <Label>Height</Label>
                    <Input defaultValue="600" />
                  </div>
                </div>

                <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
                  <h4 className="font-medium mb-2">Preview</h4>
                  <div className="bg-white dark:bg-gray-900 border rounded p-4 text-center">
                    <div className="text-sm text-gray-500 mb-2">EQUANO Graph Embed</div>
                    <div className="text-xs text-gray-400">
                      {graphSettings.title || "Untitled Graph"} â€¢ {expressions.length} expressions
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="qr" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">QR Code</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="text-center">
                  <div className="w-48 h-48 bg-gray-100 dark:bg-gray-800 rounded-lg mx-auto mb-4 flex items-center justify-center">
                    <QrCode className="h-24 w-24 text-gray-400" />
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                    Scan this QR code to open the graph on mobile devices
                  </p>
                  <Button onClick={generateQRCode}>Generate QR Code</Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="collaborate" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Invite Collaborators</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label>Email addresses</Label>
                  <Input placeholder="Enter email addresses separated by commas" />
                </div>

                <div className="space-y-2">
                  <Label>Permission level</Label>
                  <Select defaultValue="edit">
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="view">View only</SelectItem>
                      <SelectItem value="comment">Can comment</SelectItem>
                      <SelectItem value="edit">Can edit</SelectItem>
                      <SelectItem value="admin">Admin</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>Message (optional)</Label>
                  <Input placeholder="Add a personal message..." />
                </div>

                <Button className="w-full">Send Invitations</Button>

                <div className="border-t pt-4">
                  <h4 className="font-medium mb-3">Current Collaborators</h4>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded">
                      <div className="flex items-center gap-2">
                        <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs">
                          A
                        </div>
                        <span className="text-sm">alice@example.com</span>
                        <Badge variant="secondary" className="text-xs">
                          Editor
                        </Badge>
                      </div>
                      <Button variant="ghost" size="sm">
                        Remove
                      </Button>
                    </div>
                    <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded">
                      <div className="flex items-center gap-2">
                        <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center text-white text-xs">
                          B
                        </div>
                        <span className="text-sm">bob@example.com</span>
                        <Badge variant="secondary" className="text-xs">
                          Viewer
                        </Badge>
                      </div>
                      <Button variant="ghost" size="sm">
                        Remove
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  )
}
